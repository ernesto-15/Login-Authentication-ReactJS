{"version":3,"sources":["Img/logo.png","Context/auth.js","Components/PrivateRoute.jsx","Pages/Home.jsx","Components/AuthForm.jsx","Pages/Admin.jsx","Pages/Login.jsx","Pages/SignUp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","isValidated","render","props","to","pathname","state","referer","location","Home","Card","styled","div","Form","Input","input","Button","button","Logo","img","Error","Admin","setAuthTokens","onClick","Login","useState","isError","setIsError","email","setEmail","password","setPassword","postLogin","a","fetch","method","mode","body","JSON","stringify","headers","resp","json","ok","data","console","log","token","src","logoImg","type","value","onChange","e","target","placeholder","Signup","App","existingTokens","parse","localStorage","getItem","authTokens","setIsValidated","validateToken","Authorization","useEffect","Provider","logout","removeItem","setItem","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mMCE9BC,EAAcC,0BAEpB,SAASC,IACd,OAAOC,qBAAWH,GCiBLI,MAlBf,YAA0D,IAAvBC,EAAsB,EAAjCC,UAAyBC,EAAQ,6BAC/CC,EAAgBN,IAAhBM,YACR,OACE,kBAAC,IAAD,iBACMD,EADN,CAEEE,OAAQ,SAACC,GACP,OAAOF,EACL,kBAACH,EAAcK,GAEf,kBAAC,IAAD,CACEC,GAAI,CAAEC,SAAU,SAAUC,MAAO,CAAEC,QAASJ,EAAMK,kBCR/CC,MAJf,SAAcN,GACZ,OAAO,2C,khCCDT,IAAMO,EAAOC,IAAOC,IAAV,KAUJC,EAAOF,IAAOC,IAAV,KAMJE,EAAQH,IAAOI,MAAV,KAOLC,EAASL,IAAOM,OAAV,KAYNC,EAAOP,IAAOQ,IAAV,KAKJC,EAAQT,IAAOC,IAAV,KC3BIS,MAXf,SAAelB,GAAQ,IACbmB,EAAkB3B,IAAlB2B,cAIR,OAAO,6BACL,2CACA,kBAACN,EAAD,CAAQO,QALK,WACbD,EAAc,MAAM,KAIpB,a,iBCiEWE,MArEf,SAAerB,GAAO,MAEUsB,oBAAS,GAFnB,mBAEbC,EAFa,KAEJC,EAFI,OAGMF,mBAAS,IAHf,mBAGbG,EAHa,KAGNC,EAHM,OAIYJ,mBAAS,IAJrB,mBAIbK,EAJa,KAIHC,EAJG,OAKmBpC,IAA/B2B,EALY,EAKZA,cAAerB,EALH,EAKGA,YAEjB+B,EAAS,uCAAG,kCAAAC,EAAA,+EAEKC,MACjB,oDACA,CACEC,OAAQ,OACRC,KAAM,OACNC,KAAMC,KAAKC,UAAU,CACnBX,MAAOA,EACPE,SAAUA,IAEZU,QAAS,CACP,eAAgB,sBAZR,cAERC,EAFQ,gBAgBaA,EAAKC,OAhBlB,gBAgBNC,EAhBM,EAgBNA,GAAIC,EAhBE,EAgBFA,KACRD,GACFE,QAAQC,IAAI,UACZxB,EAAcsB,EAAKG,OAAO,IAE1BpB,GAAW,GArBC,kDAwBdA,GAAW,GAxBG,0DAAH,qDA4Bf,OAAI1B,EACK,kBAAC,IAAD,CAAUG,GAAG,WAIpB,kBAACM,EAAD,KACE,kBAACQ,EAAD,CAAM8B,IAAKC,MACX,kBAACpC,EAAD,KACE,kBAACC,EAAD,CACEoC,KAAK,QACLC,MAAOvB,EACPwB,SAAU,SAACC,GACTxB,EAASwB,EAAEC,OAAOH,QAEpBI,YAAY,UAEd,kBAACzC,EAAD,CACEoC,KAAK,WACLC,MAAOrB,EACPsB,SAAU,SAACC,GACTtB,EAAYsB,EAAEC,OAAOH,QAEvBI,YAAY,aAEd,kBAACvC,EAAD,CAAQO,QAASS,GAAjB,YAEF,kBAAC,IAAD,CAAM5B,GAAG,WAAT,0BACCsB,GACC,kBAACN,EAAD,4DClDOoC,MAff,WACE,OACE,kBAAC9C,EAAD,KACE,kBAACQ,EAAD,CAAM8B,IAAKC,MACX,kBAACpC,EAAD,KACE,kBAACC,EAAD,CAAOoC,KAAK,QAAQK,YAAY,UAChC,kBAACzC,EAAD,CAAOoC,KAAK,WAAWK,YAAY,aACnC,kBAACzC,EAAD,CAAOoC,KAAK,WAAWK,YAAY,mBACnC,kBAACvC,EAAD,iBAEF,kBAAC,IAAD,CAAMZ,GAAG,UAAT,8BCwDSqD,MA9Df,SAAatD,GACX,IAAMuD,EAAiBpB,KAAKqB,MAAMC,aAAaC,QAAQ,WADrC,EAEkBpC,mBAASiC,GAF3B,mBAEXI,EAFW,KAECxC,EAFD,OAGoBG,mBAASiC,GAH7B,mBAGXzD,EAHW,KAGE8D,EAHF,KAKZC,EAAa,uCAAG,WAAOjB,GAAP,eAAAd,EAAA,sEACDC,MACjB,uDACA,CACEC,OAAQ,OACRC,KAAM,OACNI,QAAS,CACPyB,cAAc,UAAD,OAAYlB,MAPX,cACdN,EADc,OAWpBsB,EAAetB,EAAKE,IAXA,kBAYbF,EAAKE,IAZQ,2CAAH,sDAiCnB,OAJAuB,qBAAU,WACRF,EAAcF,KACb,CAACA,IAGF,kBAACrE,EAAY0E,SAAb,CACEhB,MAAO,CAAEW,aAAYxC,cAnBP,SAACsB,EAAMwB,GACLJ,EAAcpB,KAE1BwB,GACFR,aAAaS,WAAW,UACxB/C,EAAc,QAEdsC,aAAaU,QAAQ,SAAUhC,KAAKC,UAAUK,IAC9CtB,EAAcsB,MAW+B3C,gBAE/C,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMG,GAAG,KAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,gBAGJ,kBAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,IAAIzE,UAAWU,IACjC,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,SAASzE,UAAWyB,IACtC,kBAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,UAAUzE,UAAWyD,IACvC,kBAAC,EAAD,CAAce,OAAK,EAACC,KAAK,SAASzE,UAAWsB,QCpDnCoD,QACW,cAA7BC,OAAOlE,SAASmE,UAEe,UAA7BD,OAAOlE,SAASmE,UAEhBD,OAAOlE,SAASmE,SAASC,MACvB,2DCZNC,IAAS3E,OACP,kBAAC,IAAM4E,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.f3c615c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0e4fdce8.png\";","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from '../Context/auth';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { isValidated } = useAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return isValidated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: '/login', state: { referer: props.location } }}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\n\r\nfunction Home(props) {\r\n  return <div>Home Page</div>;\r\n}\r\n\r\nexport default Home;","import styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-sizing: border-box;\r\n  max-width: 410px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 1rem;\r\n  border: 1px solid #999;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: linear-gradient(to bottom, #6371c7, #5563c1);\r\n  border-color: #3f4eae;\r\n  border-radius: 3px;\r\n  padding: 1rem;\r\n  color: white;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  width: 50%;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Error = styled.div`\r\n  background-color: red;\r\n`;\r\n\r\nexport { Form, Input, Button, Logo, Card, Error };","import React from \"react\";\r\nimport { Button } from \"../Components/AuthForm\";\r\nimport { useAuth } from \"../Context/auth\";\r\n\r\nfunction Admin(props) {\r\n  const { setAuthTokens } = useAuth();\r\n  const logOut = () => {\r\n    setAuthTokens(null, true)\r\n  }\r\n  return <div>\r\n    <div>Admin Page</div>\r\n    <Button onClick={logOut} >Log Out</Button>\r\n  </div>;\r\n}\r\n\r\nexport default Admin;","import React, { useState } from 'react';\r\n// import axios from 'axios';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport logoImg from '../Img/logo.png';\r\nimport { Card, Logo, Form, Input, Button, Error } from '../Components/AuthForm';\r\nimport { useAuth } from '../Context/auth';\r\n\r\nfunction Login(props) {\r\n  // const referer = props.state.location.referer || '/'\r\n  const [isError, setIsError] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const { setAuthTokens, isValidated } = useAuth();\r\n\r\n  const postLogin = async () => {\r\n    try {\r\n      const resp = await fetch(\r\n        'https://puckllay-back.herokuapp.com/login/teacher',\r\n        {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          body: JSON.stringify({\r\n            email: email,\r\n            password: password,\r\n          }),\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n      const { ok, data } = await resp.json();\r\n      if (ok) {\r\n        console.log('object');\r\n        setAuthTokens(data.token, false);\r\n      } else {\r\n        setIsError(true);\r\n      }\r\n    } catch (error) {\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  if (isValidated) {\r\n    return <Redirect to='/admin' />;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Form>\r\n        <Input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n          placeholder=\"email\"\r\n        />\r\n        <Input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => {\r\n            setPassword(e.target.value);\r\n          }}\r\n          placeholder=\"password\"\r\n        />\r\n        <Button onClick={postLogin}>Sign In</Button>\r\n      </Form>\r\n      <Link to=\"/signup\">Don't have an account?</Link>\r\n      {isError && (\r\n        <Error>The username or password provided were incorrect!</Error>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport logoImg from \"../Img/logo.png\";\r\nimport { Card, Logo, Form, Input, Button } from '../Components/AuthForm';\r\n\r\nfunction Signup() {\r\n  return (\r\n    <Card>\r\n      <Logo src={logoImg} />\r\n      <Form>\r\n        <Input type=\"email\" placeholder=\"email\" />\r\n        <Input type=\"password\" placeholder=\"password\" />\r\n        <Input type=\"password\" placeholder=\"password again\" />\r\n        <Button>Sign Up</Button>\r\n      </Form>\r\n      <Link to=\"/login\">Already have an account?</Link>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Signup;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\nimport PrivateRoute from './Components/PrivateRoute';\nimport Home from './Pages/Home';\nimport Admin from './Pages/Admin';\nimport { AuthContext } from './Context/auth';\nimport Login from './Pages/Login';\nimport Signup from './Pages/SignUp';\n\nfunction App(props) {\n  const existingTokens = JSON.parse(localStorage.getItem('tokens'));\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n  const [isValidated, setIsValidated] = useState(existingTokens);\n\n  const validateToken = async (token) => {\n    const resp = await fetch(\n      'https://puckllay-back.herokuapp.com/token/validation',\n      {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    setIsValidated(resp.ok);\n    return resp.ok;\n    // validate(resp.ok);\n  };\n\n  const setTokens = (data, logout) => {\n    const validated = validateToken(data);\n    if (validated) {\n      if (logout) {\n        localStorage.removeItem('tokens');\n        setAuthTokens(null);\n      } else {\n        localStorage.setItem('tokens', JSON.stringify(data));\n        setAuthTokens(data);\n      }\n    }\n  };\n\n  useEffect(() => {\n    validateToken(authTokens)\n  }, [authTokens]);\n\n  return (\n    <AuthContext.Provider\n      value={{ authTokens, setAuthTokens: setTokens, isValidated }}\n    >\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\">Home Page</Link>\n            </li>\n            <li>\n              <Link to=\"/admin\">Admin Page</Link>\n            </li>\n          </ul>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={Signup} />\n          <PrivateRoute exact path=\"/admin\" component={Admin} />\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}